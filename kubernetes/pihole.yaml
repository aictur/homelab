apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: pihole
  name: pihole-data
spec:
  storageClassName: local-path
  accessModes: [ReadWriteOnce]
  resources: { requests: { storage: 500M } }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: pihole
  name: pihole-dnsmasq-data
spec:
  storageClassName: local-path
  accessModes: [ReadWriteOnce]
  resources: { requests: { storage: 500M } }
---
apiVersion: v1
kind: Pod
metadata:
  name: pihole
  namespace: pihole
spec:
  hostNetwork: true
  dnsPolicy: "None"
  dnsConfig:
    nameservers:
      # upstream DNS used by pihole.
      - 1.1.1.1
      - 8.8.8.8
  containers:
    - name: pihole
      image: pihole/pihole
      imagePullPolicy: IfNotPresent
      envFrom:
      - secretRef:
          name: pihole-secrets
      env:
        - name: TZ
          value: "Europe/Madrid"
        - name: WEB_PORT
          value: "8800"
        - name: INTERFACE
          value: enp6s0
        - name: DNSMASQ_LISTENING
          value: all
      securityContext:
        privileged: true
      ports:
        - containerPort: 53
          protocol: TCP
        - containerPort: 53
          protocol: UDP
        # - containerPort: 67 # Solo es necesario si usamos DHCP
        #   protocol: UDP
        - containerPort: 8800
          protocol: TCP
      volumeMounts:
        - name: etc
          mountPath: /etc/pihole
        - name: dnsmasq
          mountPath: /etc/dnsmasq.d
      resources:
        requests:
          memory: 128Mi
          cpu: 100m
        limits:
          memory: 2Gi
          cpu: 1
  volumes:
    - name: etc
      persistentVolumeClaim:
        claimName: pihole-data
    - name: dnsmasq
      persistentVolumeClaim:
        claimName: pihole-dnsmasq-data